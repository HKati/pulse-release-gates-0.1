name: Publish latest PULSE report to Pages

on:
  workflow_run:
    workflows: ["PULSE CI"]      # <-- pontosan egyezzen a CI workflow nevével
    types: [completed]

permissions:
  actions: read                  # artifact olvasása
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  deploy:
    # Csak sikeres CI után és csak ha explicit engedélyezve van.
    if: ${{ github.event.workflow_run.conclusion == 'success' && vars.PUBLISH_PAGES == 'true' }}
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Download ALL artifacts from triggering run
        uses: dawidd6/action-download-artifact@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          run_id: ${{ github.event.workflow_run.id }}
          # NEM adunk meg 'name'-et -> az összes artefakt lejön a 'public' alá
          path: public

      - name: Build site from artifacts (index.html + badges + status.json)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p public/site

          # report_card.html -> index.html
          SRC="$(find public -type f -name 'report_card.html' | head -n1 || true)"
          if [ -n "$SRC" ]; then
            cp "$SRC" public/site/index.html
          else
            echo "::warning::report_card.html not found in artifacts"
            cat > public/site/index.html <<'HTML'
<!doctype html><meta charset="utf-8"><title>PULSE report</title>
<h1>No report_card.html found</h1>
<p>Ensure PULSE CI uploaded artifacts before publishing Pages.</p>
HTML
          fi

          # badges/*.svg -> site/badges/
          if [ -d public/badges ]; then
            mkdir -p public/site/badges
            cp -r public/badges/*.svg public/site/badges/ || true
          fi

          # status.json -> site/status.json  (stabil URL-hez)
          SJSON="$(find public -type f -name 'status.json' | head -n1 || true)"
          if [ -n "$SJSON" ]; then
            cp "$SJSON" public/site/status.json
          else
            echo "::warning::status.json not found in artifacts"
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          enablement: true

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public/site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
